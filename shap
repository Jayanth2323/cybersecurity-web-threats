import streamlit as st
import pandas as pd
import shap
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import (
    accuracy_score,
    classification_report,
    confusion_matrix,
)
import os

# Disable TensorFlow warnings
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

st.set_page_config(page_title="SHAP Explainability", layout="wide")
st.title("ðŸ§  SHAP Explainability: Why This Was Flagged")

# Load & clean data
@st.cache_data
def load_data():
    try:
        df = pd.read_csv("data/analyzed_output.csv")
        df = df.dropna(
            subset=[
                "anomaly",
                "bytes_in",
                "bytes_out",
                "duration_seconds",
                "avg_packet_size",
            ]
        )
        le = LabelEncoder()
        df["anomaly_binary"] = le.fit_transform(df["anomaly"])
        return df
    except FileNotFoundError:
        st.error(
            """Error: The file 'data/analyzed_output.csv' was not found.
            Please make sure the file is in the correct location."""
        )
        return None

df = load_data()
if df is None:
    st.stop()

features = ["bytes_in", "bytes_out", "duration_seconds", "avg_packet_size"]
X = df[features]
y = df["anomaly_binary"]

# Train model
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluation
y_pred = model.predict(X_test)
st.markdown("### ðŸ“Š Model Evaluation")
st.metric("Accuracy", f"{accuracy_score(y_test, y_pred):.2f}")
st.text("Classification Report:")
st.text(classification_report(y_test, y_pred))
st.text("Confusion Matrix:")
st.write(confusion_matrix(y_test, y_pred))

# SHAP
explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X_test)

# Debug SHAP values structure
st.write(f"SHAP version: {shap.__version__}")
st.write(f"SHAP values structure: {type(shap_values)}")
st.write(f"Length of SHAP values: {len(shap_values)}")
st.write(f"Shape of class 1 SHAP values: {np.array(shap_values[1]).shape}")

# Sample selection
st.markdown("### ðŸ”Ž Select a Sample for Explanation")
selected_index = st.number_input(
    f"Row Index (0 - {len(X_test) - 1})",
    min_value=0,
    max_value=len(X_test) - 1,
    step=1,
)
sample = X_test.iloc[selected_index:selected_index + 1]
sample_pred = model.predict(sample)[0]
label = "Suspicious" if sample_pred == 1 else "Normal"
st.markdown(f"**Prediction for selected row:** `{label}`")

# SHAP Explanation (Static Plot)
st.markdown("### ðŸ“‰ SHAP Force Plot (Static)")
plt.figure()
try:
    # Convert to numpy arrays to ensure consistent types
    shap_array = np.array(shap_values[1][selected_index])
    feature_array = np.array(sample.iloc[0].values)
    
    # Ensure we're using the correct base value
    base_value = explainer.expected_value[1]
    if isinstance(base_value, np.ndarray):
        base_value = float(base_value[0])
    
    # Debug information
    st.write("Debug Info:")
    st.write(f"Base value: {base_value} (type: {type(base_value)})")
    st.write(f"SHAP values shape: {shap_array.shape}")
    st.write(f"Feature values shape: {feature_array.shape}")
    
    # Create the force plot
    shap.force_plot(
        base_value,
        shap_array,
        feature_array,
        feature_names=features,
        matplotlib=True,
        show=False,
    )
    st.pyplot(plt.gcf(), bbox_inches="tight")
    plt.clf()

except Exception as e:
    st.error(f"Error generating SHAP plot: {str(e)}")
    st.error("Troubleshooting steps:")
    st.error("1. Verify SHAP values and feature values have same length")
    st.error("2. Check that sample.iloc[0].values returns a 1D array")
    st.error("3. Try updating SHAP: pip install --upgrade shap")

# Alternative force plot for all samples
with st.expander("ðŸ“Š SHAP Force Plot (All Samples)", expanded=False):
    plt.figure()
    try:
        shap.force_plot(
            explainer.expected_value[1],
            shap_values[1],
            X_test,
            feature_names=features,
            matplotlib=True,
            show=False,
        )
        st.pyplot(plt.gcf(), bbox_inches="tight")
        plt.clf()
    except Exception as e:
        st.error(f"Error generating full SHAP plot: {str(e)}")

# Top Features Chart
with st.expander("ðŸ“Š Top Contributing Features", expanded=False):
    try:
        shap_row = shap_values[1][selected_index]
        abs_shap_values = np.abs(shap_row)
        feature_importance = pd.DataFrame(
            {
                "Feature": features,
                "SHAP Value": shap_row,
                "Absolute SHAP": abs_shap_values,
            }
        ).sort_values(by="Absolute SHAP", ascending=False)

        fig_bar = px.bar(
            feature_importance,
            x="SHAP Value",
            y="Feature",
            orientation="h",
            title="Top Contributing Features",
            color="SHAP Value",
            color_continuous_scale="RdBu",
        )
        st.plotly_chart(fig_bar, use_container_width=True)
    except Exception as e:
        st.error(f"Error generating feature importance plot: {str(e)}")

# Summary Plot
with st.expander("ðŸ“ˆ SHAP Summary Plot (All Samples)"):
    plt.figure()
    try:
        shap.summary_plot(shap_values[1], X_test, show=False)
        st.pyplot(plt.gcf(), bbox_inches="tight")
        plt.clf()
    except Exception as e:
        st.error(f"Error generating summary plot: {str(e)}")

# SHAP CSV Export
@st.cache_data
def get_shap_values_df():
    return pd.DataFrame(shap_values[1], columns=features)

shap_values_df = get_shap_values_df()
csv = shap_values_df.to_csv(index=False)
st.download_button(
    label="ðŸ“¥ Download SHAP Values (CSV)",
    data=csv,
    file_name="shap_values.csv",
    mime="text/csv",
)

# Optional full table
if st.button("ðŸ§¾ Show All SHAP Values Table"):
    st.write(shap_values_df)