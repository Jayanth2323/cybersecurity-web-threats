import streamlit as st
import pandas as pd
import datetime
from xhtml2pdf import pisa
from io import BytesIO

st.set_page_config(page_title="üì• Export PDF Report", layout="wide")
st.title("Generate & Download PDF Threat Report")


@st.cache_data
def load_data():
    try:
        return pd.read_csv("data/analyzed_output.csv")
    except Exception as e:
        st.error("Error loading data")
        st.text(str(e))


df = load_data()

# Filter Options
st.markdown("### Filter Options")
status_options = df["anomaly"].dropna().unique().tolist()
selected_status = st.multiselect(
    "Filter by Anomaly", status_options, default=status_options
)
filtered_df = df[df["anomaly"].isin(selected_status)].copy()

# Metadata
st.markdown("### Report Metadata")
report_title = st.text_input("Report Title", "Cybersecurity Threat Summary")
analyst_name = st.text_input("Prepared By", "Jayanth Chennoju")
report_date = st.date_input("Report Date", datetime.date.today())

# Preview Data
st.markdown("### Preview of Filtered Data")
st.dataframe(filtered_df, use_container_width=True)

# Build HTML
generation_timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
html = f"""
<html>
<head>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 30px;
            font-size: 12px;
        }}
        h1 {{
            color: #2E86C1;
            text-align: center;
            margin-bottom: 20px;
        }}
        .meta {{
            margin-bottom: 20px;
            font-size: 11pt;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }}
        th, td {{
            border: 1px solid #bbb;
            padding: 5px;
            text-align: left;
            vertical-align: top;
            font-size: 10pt;
        }}
        th {{
            background-color: #f2f2f2;
        }}
        .footer {{
            margin-top: 40px;
            text-align: center;
            font-size: 9pt;
            color: #888;
        }}
    </style>
</head>
<body>
    <h1>{report_title}</h1>
    <div class="meta">
        <p><strong>Analyst:</strong> {analyst_name}</p>
        <p><strong>Date:</strong> {report_date}</p>
        <p><strong>Total Records:</strong> {len(filtered_df)}</p>
    </div>

    {filtered_df.to_html(index=False, border=0)}

    <div class="footer">
        <p>This report was auto-generated by the Cybersecurity ML Platform.<br>
        Generated on {generation_timestamp}</p>
    </div>
</body>
</html>
"""

# PDF Export
if st.button("Generate PDF"):
    try:
        pdf_output = BytesIO()
        pisa_status = pisa.CreatePDF(html, dest=pdf_output)

        if not pisa_status.err:
            timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
            safe_title = report_title.replace(" ", "_").replace("/", "_")
            file_name = f"{safe_title}_{timestamp}.pdf"

            st.download_button(
                label="Download PDF",
                data=pdf_output.getvalue(),
                file_name=file_name,
                mime="application/pdf",
            )
            st.success("‚úÖ PDF generated and ready for download.")
        else:
            st.error(
                "‚ùå PDF generation failed. Please verify HTML/CSS compatibility."
            )
    except Exception as e:
        st.error("‚ö†Ô∏è Unexpected error during PDF generation.")
        st.code(str(e))
